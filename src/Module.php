<?php
namespace Yakisova41\ModuleLoader;
use Yakisova41\ModuleLoader\StyleParser;

class Module
{
    private static $modulePath;
    private static $importMode;
    private static $moduleName;
    private static $modules = [];
    private static $styles = "";
    private static $Names = [];

    public static function import(
        $modulePath,
        $moduleName = false
    )
    {
        self::ErrorHandle();

        if(file_exists($modulePath.'.php'))
        {
            self::$modulePath = $modulePath;
            self::$importMode = 'module';
        }
        else if(file_exists($modulePath.'.style.json'))
        {
            self::$modulePath = $modulePath;
            self::$importMode = 'style';
        }
        else
        {
            trigger_error("File \"$modulePath\" not found", E_USER_WARNING);
            return;
        }

        if(self::$importMode === 'module')
        {
            if($moduleName)
            {
                self::$moduleName = $moduleName;
            }
            else
            {
                self::$moduleName = 'default';
            }

            return self::moduleImport($modulePath.'.php');
        }
        else if(self::$importMode === 'style')
        {
            return self::styleImport($modulePath.'.style.json');
        }
    }

    public static function exportDefault(
        $callBack
    )
    {
        self::$modules['default'] = $callBack;
    }

    public static function export(
        $callBack,
        $moduleName
    )
    {
        self::$modules[$moduleName] = $callBack;
    }

    public static function style()
    {
        return "<style>/*\nThis CSS generated by Yakisova41/moduleloader v 2.0.1(https://github.com/yakisova41/moduleloader)\nMIT License

        Copyright (c) 2022 yakisova41
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the 'Software'), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.\n*/\n ".self::$styles."</style>";
    }

    private static function moduleImport(
        $modulePath
    )
    {
        if(file_exists($modulePath))
        {
            require($modulePath);

            if(isset(self::$modules[self::$moduleName]))
            {
                return self::$modules[self::$moduleName];
            }

            trigger_error(self::$moduleName." module not found in imported file", E_USER_WARNING);
            return;
        }
    }

    private static function styleImport(
        $stylePath
    )
    {
        $parsedStyles = StyleParser::parse(file_get_contents($stylePath));

        $stylesString =  "";
        $styleLast = "";
        
        $optionsMode = false;
        $optionsName;
        
        foreach($parsedStyles as $styleKey => $style)
        {
            $selectorStr = "";

            foreach($style['selector'] as $selectorKey => $selector)
            {
                switch($selector['type'])
                {
                    case 'className':
                        if(!isset(self::$Names['.'.$selector['data']]))
                        {
                            $classNameHash = self::randomName(10);
                            self::$Names['.'.$selector['data']] = $classNameHash;
                        }
    
                        $selectorStr = $selectorStr." .".self::$Names['.'.$selector['data']];   
                        
                        break;

                    case 'IdName':
                        if(!isset(self::$Names['#'.$selector['data']]))
                        {
                            $classNameHash = self::randomName(10);
                            self::$Names['#'.$selector['data']] = $classNameHash;
                        }
    
                        $selectorStr = $selectorStr." #".self::$Names['#'.$selector['data']];
                        break;

                    case 'HtmlElement':
                        $selectorStr = $selectorStr." ".$selector['data'];
                        break;

                    case 'Attr':
                        $selectorStr = $selectorStr."[".$selector['data']."]";
                        break;

                    case 'PseudoElements':
                        $selectorStr = $selectorStr."::".$selector['data'];
                        break;

                    case 'PseudoClasses':
                        $selectorStr = $selectorStr.":".$selector['data'];
                        break;

                    case 'And':
                        $selectorStr = $selectorStr.",";
                        break;

                    case 'Child':
                        $selectorStr = $selectorStr.">";
                        break;

                    case 'AdjacentSibling':
                        $selectorStr = $selectorStr."+";
                        break;
                    
                    case 'GeneralSibling':
                        $selectorStr = $selectorStr."~";
                        break;

                    case "LoaderStyleOption":
                        $optionsMode = true;
                        $optionsName = $selector['data'];
                }
            }

            if(!$optionsMode)
            {
                $styleStr = "$selectorStr{";

                foreach($style['styles'] as $stylePropatyName => $styleValue)
                {
                    $styleStr = "$styleStr$stylePropatyName:$styleValue;";
                }

                $styleStr = "$styleStr}";
                
                self::$styles = self::$styles.$styleStr;
            }
            else
            {
                switch($optionsName)
                {
                    case 'mediaQuery':
                        $mediaQuery = "@media screen";
                        foreach($style['styles'] as $name => $propaty)
                        {
                            $mediaQuery = "$mediaQuery and ($name:$propaty)";
                        }
                        self::$styles = self::$styles.$mediaQuery.'{';
                        $styleLast = $styleLast.'}';
                }

                $optionsMode  = false;
            }
        }
        self::$styles = self::$styles.$styleLast;

        return function($className){
            
            return self::$Names[$className];
        };
    }
    
    private static function randomName($length)
    {
        $words = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'
        ];

        $hash = "";
        $i = 0;

        while($i < $length)
        {
            $hash = $hash.$words[array_rand($words)];
            $i++;
        }

        return $hash;
    }

    private static function ErrorHandle()
    {
        set_error_handler(function($errno, $errstr){
            if (!(error_reporting() & $errno))
            {
                return;
            }

            $errstr = htmlspecialchars($errstr);
            $backtraces = debug_backtrace();
            $lastbacktrace = $backtraces[array_key_last($backtraces)];

            $errfile = $lastbacktrace['file'];
            $errline = $lastbacktrace['line'];

            switch ($errno)
            {
                case E_USER_WARNING:
                    echo "<br /><b>ModuleLoader Warning</b>: $errstr in <b>$errfile</b> on line <b>$errline</b><br />\n";
                    break;
                case E_USER_ERROR:
                    echo "<br /><b>ModuleLoader Error</b>: $errstr in <b>$errfile</b> on line <b>$errline</b><br />\n";
                    break;
            }
        });
    }
}
